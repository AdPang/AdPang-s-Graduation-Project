// <auto-generated />
using System;
using AdPang.FileManager.EntityFrameworkCore.FileManagerDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AdPang.FileManager.EntityFrameworkCore.Migrations.FileManagerDbMigration
{
    [DbContext(typeof(FileManagerDbContext))]
    [Migration("20220812141320_AddColumn_ExpiredFromTableSharedFileInfo")]
    partial class AddColumn_ExpiredFromTableSharedFileInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.CloudFileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("FileLength")
                        .HasColumnType("bigint");

                    b.Property<string>("FileMD5Str")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("char");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserCount")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CloudFileInfos");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.DirInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ParentDirInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ParentDirInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("DirInfos");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.SharedFileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DirId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSingleFile")
                        .HasColumnType("bit");

                    b.Property<Guid>("ShardByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SharedDesc")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("SharedPassword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SingleFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DirId");

                    b.HasIndex("ShardByUserId");

                    b.HasIndex("SingleFileId");

                    b.ToTable("SharedFileInfos");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.UserPrivateFileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CurrentDirectoryInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RealFileInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrentDirectoryInfoId");

                    b.HasIndex("RealFileInfoId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPrivateFileInfos");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.LocalPrivate.PrivateDiskInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiskName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("DiskSN")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("char");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateDiskInfos");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.LocalPrivate.PrivateFileInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DiskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("FileLength")
                        .HasColumnType("bigint");

                    b.Property<string>("FileMD5Str")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiskId");

                    b.HasIndex("UserId");

                    b.ToTable("PrivateFileInfos");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.IdentityEntities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("AdPang.FileManager.Models.IdentityEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("CloudFileInfoUser", b =>
                {
                    b.Property<Guid>("CloudFileInfosId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CloudFileInfosId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("CloudFileInfoUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.CloudFileInfo", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", "UploadBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UploadBy");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.DirInfo", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.DirInfo", "ParentDirInfo")
                        .WithMany("ChildrenDirInfo")
                        .HasForeignKey("ParentDirInfoId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", "User")
                        .WithMany("DirInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ParentDirInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.SharedFileInfo", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.DirInfo", "DirInfo")
                        .WithMany()
                        .HasForeignKey("DirId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", "ShardByUser")
                        .WithMany("SharedFileInfos")
                        .HasForeignKey("ShardByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.UserPrivateFileInfo", "SingleFileInfo")
                        .WithMany()
                        .HasForeignKey("SingleFileId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DirInfo");

                    b.Navigation("ShardByUser");

                    b.Navigation("SingleFileInfo");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.UserPrivateFileInfo", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.DirInfo", "CurrentDirectoryInfo")
                        .WithMany("ChildrenFileInfo")
                        .HasForeignKey("CurrentDirectoryInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.CloudFileInfo", "RealFileInfo")
                        .WithMany()
                        .HasForeignKey("RealFileInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", "User")
                        .WithMany("UserPrivateFileInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CurrentDirectoryInfo");

                    b.Navigation("RealFileInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.LocalPrivate.PrivateDiskInfo", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", "User")
                        .WithMany("PrivateDiskInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.LocalPrivate.PrivateFileInfo", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.LocalPrivate.PrivateDiskInfo", "DiskInfo")
                        .WithMany("PrivateFiles")
                        .HasForeignKey("DiskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", "User")
                        .WithMany("PrivateFileInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DiskInfo");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CloudFileInfoUser", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.CloudFileInfo", null)
                        .WithMany()
                        .HasForeignKey("CloudFileInfosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("AdPang.FileManager.Models.IdentityEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.CloudSaved.DirInfo", b =>
                {
                    b.Navigation("ChildrenDirInfo");

                    b.Navigation("ChildrenFileInfo");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.FileManagerEntities.LocalPrivate.PrivateDiskInfo", b =>
                {
                    b.Navigation("PrivateFiles");
                });

            modelBuilder.Entity("AdPang.FileManager.Models.IdentityEntities.User", b =>
                {
                    b.Navigation("DirInfos");

                    b.Navigation("PrivateDiskInfos");

                    b.Navigation("PrivateFileInfos");

                    b.Navigation("SharedFileInfos");

                    b.Navigation("UserPrivateFileInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
